{
	"info": {
		"_postman_id": "63283323-05c9-4bcd-935b-7bbd821e19f3",
		"name": "js-ex",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create & activate user",
			"item": [
				{
					"name": "register user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Registration is correct\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.u_status).to.eql(\"created\");",
									"});",
									"",
									"pm.test(\"Body contains correct items\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"u_id\");",
									"  pm.expect(pm.response.text()).to.include(\"time\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"ID is extracted\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set(\"user1-id\", responseJson.u_id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
									"pm.collectionVariables.set(\"user1-email\", `${userName}_${Date.now()}@mta.ac.il`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "{ token:kahgfahbsfi47ry }",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"full_name\":\"Ilan Zisser\",\r\n    \"email\":\"{{user1-email}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/register",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "register user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Registration is correct\", () => {",
									"  const responseJson = pm.response.json();",
									"  pm.expect(responseJson.u_status).to.eql(\"created\");",
									"});",
									"",
									"pm.test(\"Body contains correct items\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"u_id\");",
									"  pm.expect(pm.response.text()).to.include(\"time\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"ID is extracted\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set(\"user2-id\", responseJson.u_id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
									"pm.collectionVariables.set(\"user2-email\", `${userName}_${Date.now()}@mta.ac.il`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "{ token:kahgfahbsfi47ry }",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"full_name\":\"Ilan Zisser\",\r\n    \"email\":\"{{user2-email}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/register",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "login-admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body contains token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Token is extracted\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set(\"admin-token\", responseJson.token);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{admin-email}}\",\r\n    \"password\":\"Badgroot123\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/login",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "status activate user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"u_id\":\"{{user1-id}}\",\r\n    \"u_status\":\"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{admin-path}}/status",
							"host": [
								"{{host}}{{admin-path}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "status activate user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin-token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"u_id\":\"{{user2-id}}\",\r\n    \"u_status\":\"active\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{admin-path}}/status",
							"host": [
								"{{host}}{{admin-path}}"
							],
							"path": [
								"status"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin-all-users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body contains users\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"users\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}api/users",
							"host": [
								"{{host}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "message (broadcast)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct items\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"m_id\");\r",
									"  pm.expect(pm.response.text()).to.include(\"m_status\");\r",
									"  pm.expect(pm.response.text()).to.include(\"text\");\r",
									"  pm.expect(pm.response.text()).to.include(\"time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{admin-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"{{$randomLoremSentence}}\"\r\n}"
						},
						"url": {
							"raw": "{{host}}{{admin-path}}/broadcast",
							"host": [
								"{{host}}{{admin-path}}"
							],
							"path": [
								"broadcast"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "User lifecycle",
			"item": [
				{
					"name": "login user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body contains token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Token is extracted\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set(\"user1-token\", responseJson.token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{user1-email}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/login",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "login user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body contains token\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"token\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Token is extracted\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set(\"user2-token\", responseJson.token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{user2-email}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/login",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "user-all-users",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body contains users\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"users\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{host}}api/users",
							"host": [
								"{{host}}api"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "post user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body contains info\",() => {",
									"    pm.expect(pm.response.text()).to.include(\"time\");",
									"    pm.expect(pm.response.text()).to.include(\"p_id\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Post id is extracted\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set(\"post1_id\", responseJson.p_id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"{{$randomLoremSentence}}\"\r\n}"
						},
						"url": {
							"raw": "{{host}}{{user-path}}/post",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "post user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"    pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Body contains info\",() => {",
									"    pm.expect(pm.response.text()).to.include(\"time\");",
									"    pm.expect(pm.response.text()).to.include(\"p_id\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"    pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									"pm.test(\"Post id is extracted\", () => {",
									"    const responseJson = pm.response.json();",
									"    pm.collectionVariables.set(\"post2_id\", responseJson.p_id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"text\":\"{{$randomLoremSentence}}\"\r\n}"
						},
						"url": {
							"raw": "{{host}}{{user-path}}/post",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "post-all",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains posts\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"posts\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"u_id\":\"0\",\r\n    \"post_amount\":\"5\"\r\n}"
						},
						"url": {
							"raw": "{{host}}{{user-path}}/post",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "post",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"    pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains post id\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"p_id\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"p_id\":\"{{post1_id}}\"\r\n}"
						},
						"url": {
							"raw": "{{host}}{{user-path}}/post",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"post"
							]
						}
					},
					"response": []
				},
				{
					"name": "message (user to user)",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct items\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"receiver_id\");\r",
									"  pm.expect(pm.response.text()).to.include(\"m_id\");\r",
									"  pm.expect(pm.response.text()).to.include(\"m_status\");\r",
									"  pm.expect(pm.response.text()).to.include(\"text\");\r",
									"  pm.expect(pm.response.text()).to.include(\"time\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"receiver_id\": \"{{user2-id}}\",\r\n    \"text\":\"{{$randomLoremSentence}}\"\r\n}"
						},
						"url": {
							"raw": "{{host}}{{user-path}}/message",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"message"
							]
						}
					},
					"response": []
				},
				{
					"name": "messages",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {\r",
									"  pm.expect(pm.response.code).to.eql(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Body contains correct items\",() => {\r",
									"  pm.expect(pm.response.text()).to.include(\"messages\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 200ms\", () => {\r",
									"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
									"});\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"sender_id\":\"0\",\r\n    \"m_status\":\"all\"\r\n}"
						},
						"url": {
							"raw": "{{host}}{{user-path}}/message",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"message"
							]
						}
					},
					"response": []
				},
				{
					"name": "logout user1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user1-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/logout",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete user2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", () => {",
									"  pm.expect(pm.response.code).to.eql(200);",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}",
							"host": [
								"{{host}}{{user-path}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Bad requests",
			"item": [
				{
					"name": "login user2 unautorized",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", () => {",
									"  pm.expect(pm.response.code).to.eql(401);",
									"});",
									"",
									"pm.test(\"Body contains error\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"error\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"email\":\"{{user2-email}}\",\r\n    \"password\":\"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/login",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "register existing bad-request",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", () => {",
									"  pm.expect(pm.response.code).to.eql(400);",
									"});",
									"",
									"pm.test(\"Body contains error\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"error\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let userName = pm.variables.replaceIn(\"{{$randomUserName}}\")\r",
									"pm.globals.set(\"user-email\", `${userName}_${Date.now()}@mta.ac.il`)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "{ token:kahgfahbsfi47ry }",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"full_name\":\"Ilan Zisser\",\r\n    \"email\":\"{{admin-email}}\",\r\n    \"password\":\"15926Abc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}/register",
							"host": [
								"{{host}}{{user-path}}"
							],
							"path": [
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete deleted user forbidden",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", () => {",
									"  pm.expect(pm.response.code).to.eql(403);",
									"});",
									"",
									"pm.test(\"Body contains error\",() => {",
									"  pm.expect(pm.response.text()).to.include(\"error\");",
									"});",
									"",
									"pm.test(\"Response time is less than 200ms\", () => {",
									"  pm.expect(pm.response.responseTime).to.be.below(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{user2-token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "default"
							},
							{
								"key": "Authorization",
								"value": "{ \"--token\":--\"{{user-token}}\"}",
								"type": "default"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"password\":\"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{host}}{{user-path}}",
							"host": [
								"{{host}}{{user-path}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "localhost:2718/",
			"type": "string"
		},
		{
			"key": "user-path",
			"value": "api/user",
			"type": "string"
		},
		{
			"key": "admin-path",
			"value": "api/admin",
			"type": "string"
		},
		{
			"key": "admin-email",
			"value": "root@mta.ac.il",
			"type": "string"
		},
		{
			"key": "admin-id",
			"value": "1",
			"type": "string"
		},
		{
			"key": "admin-token",
			"value": "",
			"type": "string"
		},
		{
			"key": "user1-email",
			"value": "",
			"type": "string"
		},
		{
			"key": "user1-id",
			"value": "30",
			"type": "string"
		},
		{
			"key": "user1-token",
			"value": "",
			"type": "string"
		},
		{
			"key": "post1_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "user2-email",
			"value": "",
			"type": "string"
		},
		{
			"key": "user2-id",
			"value": "31",
			"type": "string"
		},
		{
			"key": "user2-token",
			"value": "",
			"type": "string"
		},
		{
			"key": "post2_id",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "15926Abc",
			"type": "string"
		},
		{
			"key": "post_id",
			"value": ""
		}
	]
}